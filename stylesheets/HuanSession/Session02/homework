package com.Collentions;

import java.util.*;

public class CollectionsDemo {

	public static void main(String[] args) {
		// TODO 自动生成的方法存根
		ArrayList list=new ArrayList();
		list.add("aaaa");
		list.add("cc");
		list.add("z");
		list.add("zz");
		list.add("ddd");
		Collections.sort(list);
		System.out.println(list);
	int index=	Collections.binarySearch(list, "cc");
	System.out.println("index="+index);
		System.out.println(list);
		int t=MyBinarySearch(list, "cc");
		System.out.println("index="+t);
	}
public static    int MyBinarySearch (ArrayList <String > a1,String key)
{
	int max,min,mid;
	max=a1.size()-1;
	min=0;
	
	while (min<=max)
	{
		mid=(max+min)/2;
		String   str =a1.get(mid);
		int num=str.compareTo(key);
		if(num>0)
		{
			max=mid-1;
			
		}
		else if (num<0)
		{
			min=mid+1;
		}
		else 
		return   mid;
}
	return -min-1;
}
}


package com.fanxing;

import java.util.*;

class Per // implements Comparable<Per>
{
	private String name ;
	Per (String name )
	{
		this.name=name ;
		
	}
	public String getName ()
	{
		return name ;
	}
	@Override
	public String toString() {
		return "Per [name=" + name + "]";
	}
	

}

class Worker   extends  Per //  implements  Comparable <Worker >
{
	private String name ;
	
	Worker(String name) {
		super(name);
 
	}
	
	@Override
	public String toString() {
		return "Worker [name=" + name + "]";
	}


}
  
class MyComp implements Comparator<Per>
{

	@Override
	public int compare(Per o1, Per o2) {
		// TODO 自动生成的方法存根
		return o1.getName().compareTo(o2.getName());
	}
	
}

class MyWorker implements Comparator <Worker>
{

	@Override
	public int compare(Worker o1, Worker o2) {
		// TODO 自动生成的方法存根
		return o1.getName().compareTo(o2.getName());
	}
	
}


public class FanxingDemo03 {

	public static void main(String[] args) {
		// TODO 自动生成的方法存根
		TreeSet <Per> tree =new TreeSet <Per> (new MyComp());
		
		tree.add(new Per("asd6"));
		tree.add(new Per("asd3"));
		tree.add(new Per("asd5"));
		tree.add(new Per("asd2"));
		
		
		TreeSet <Worker> tree1=new TreeSet <Worker> ( new MyWorker());
		tree1.add(new Worker("zasd6"));
		tree1.add(new Worker("zasd3"));
		tree1.add(new Worker("zasd5"));
		tree1.add(new Worker("zasd2"));
		
     	 show (tree);
		Iterator< Per> it1=tree.iterator();
		while (it1.hasNext())
		{
			System.out.println(it1.next().getName());
		}
	}
	
	 
public static void show ( TreeSet <? extends Per> a1)
{
	Iterator<? extends Per > it=a1.iterator();
	while (it.hasNext())
	{
		System.out.println(it.next().toString());
	}
}




}
